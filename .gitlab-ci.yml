stages:
  - lint
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

# Configuration du cache pour les dépendances npm
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - frontend/node_modules/
    - backend/users_service/node_modules/
    - backend/orders_service/node_modules/

# Linting du code
lint:
  stage: lint
  image: node:18-alpine
  script:
    - cd frontend
    - npm ci
    - npm run lint
    - cd ../backend/users_service
    - npm ci
    - npm run lint || true
    - cd ../orders_service
    - npm ci
    - npm run lint || true

# Tests
test:frontend:
  stage: test
  image: node:18-alpine
  script:
    - cd frontend
    - npm ci
    - npm test || true

test:users-service:
  stage: test
  image: node:18-alpine
  script:
    - cd backend/users_service
    - npm ci
    - npm test || true

test:orders-service:
  stage: test
  image: node:18-alpine
  script:
    - cd backend/orders_service
    - npm ci
    - npm test || true

# Build des images Docker
build:frontend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker build -t ${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_SHA} frontend/
    - docker tag ${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_SHA} ${CI_REGISTRY_IMAGE}/frontend:latest
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push ${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_SHA}
    - docker push ${CI_REGISTRY_IMAGE}/frontend:latest
  only:
    - main

build:users-service:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker build -t ${CI_REGISTRY_IMAGE}/users-service:${CI_COMMIT_SHA} backend/users_service/
    - docker tag ${CI_REGISTRY_IMAGE}/users-service:${CI_COMMIT_SHA} ${CI_REGISTRY_IMAGE}/users-service:latest
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push ${CI_REGISTRY_IMAGE}/users-service:${CI_COMMIT_SHA}
    - docker push ${CI_REGISTRY_IMAGE}/users-service:latest
  only:
    - main

build:orders-service:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker build -t ${CI_REGISTRY_IMAGE}/orders-service:${CI_COMMIT_SHA} backend/orders_service/
    - docker tag ${CI_REGISTRY_IMAGE}/orders-service:${CI_COMMIT_SHA} ${CI_REGISTRY_IMAGE}/orders-service:latest
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push ${CI_REGISTRY_IMAGE}/orders-service:${CI_COMMIT_SHA}
    - docker push ${CI_REGISTRY_IMAGE}/orders-service:latest
  only:
    - main

# Déploiement
deploy:production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $SERVER_USER@$SERVER_HOST "cd /opt/restaurant-app && docker-compose pull && docker-compose up -d"
  environment:
    name: production
    url: https://restaurant-app.example.com
  only:
    - main
  when: manual 